#!/bin/bash

function log { # output to STDOUT
    echo "$*"
}

function errlog { # output to STDERR
    >&2 echo "$*"
}

function notify {
    if [ -n "${use_notify}" ]; then
        if which notify-send > /dev/null ; then
            DISPLAY=:0.0 XAUTHORITY=$HOME/.Xauthority notify-send "Backup" "$1"
        else
            errlog "'use_notify' config flag is set but notify-send is not installed"
        fi
    fi
}

function die {
    rm -f ${CONFIG_DIR}/${MODULE}/lock
    notify "ERROR: $1"
    errlog "ERROR: $1"
    exit 1
}


function max_size_arg() {
    if [ -n "$max_size" ]
    then
        echo "--max-size $max_size"
    else
        echo ""
    fi
}


function push_backup() {
    # Create the backup directory if needed.
    # (Re)create the symlinks if they don't exist, or if the number of
    # snapshots has changed such that the symlinks no longer point to the
    # right place.
    ssh ${SSH_IDENTITY} -T $backup_host <<EOF
        mkdir -p $remote_path/${MODULE} &&
        cd $remote_path/${MODULE} &&
        {
            if [ ! -h daily.0 -o "\$(readlink daily.0)" != hourly.${hourly_snapshots} ]; then
                rm -f daily.0;
                ln -s hourly.${hourly_snapshots} daily.0;
            fi;
            if [ ! -h weekly.0 -o "\$(readlink weekly.0)" != daily.${daily_snapshots} ]; then
                rm -f weekly.0;
                ln -s daily.${daily_snapshots} weekly.0;
            fi;
            if [ ! -h monthly.0 -o "\$(readlink monthly.0)" != weekly.${weekly_snapshots} ]; then
                rm -f monthly.0;
                ln -s weekly.${weekly_snapshots} monthly.0;
            fi;
        }
EOF

    [ $? == 0 ] || die "Failed creating target path"

    EXCLUDE_FILE="${CONFIG_DIR}/${MODULE}/exclude"
    if [ -f "${EXCLUDE_FILE}" ]; then
        EXCLUDE="--delete-excluded --exclude-from=${EXCLUDE_FILE}"
    else
        EXCLUDE=""
    fi

    if [ -n "${bwlimit}" ]; then
        BWLIMIT_ARG="--bwlimit=${bwlimit}"
    else
        BWLIMIT_ARG=""
    fi

    rsync -az \
        --partial \
        --delete \
        ${EXCLUDE} \
        ${BWLIMIT_ARG} \
        --link-dest=../hourly.1 \
        -e "ssh ${SSH_IDENTITY}" \
        --itemize-changes \
        $(max_size_arg) \
        $backup_root \
        $backup_host:$remote_path/${MODULE}/hourly.0;

    [ $? == 0 -o $? == 24 ] || die "rsync failed"
}


function rotate_snapshots {
  local interval=$1
  local snapshot_var=${interval}_snapshots
  local snapshots=${!snapshot_var}
  log "Rotate $1"

  ssh ${SSH_IDENTITY} -T $backup_host <<EOF
    cd $remote_path/${MODULE};
    [ -d $interval.$snapshots ] && rm -rf $interval.$snapshots;
    for i in {$snapshots..2}; do
      [ -d $interval.\$(( \$i - 1 )) ] && mv $interval.\$(( \$i - 1 )) $interval.\$i;
    done;
    if [ -h $interval.0 ]; then
      touch -h $interval.0
      cp -al \$(readlink $interval.0) $interval.1;
    else
      touch $interval.0
      cp -al $interval.0 $interval.1;
    fi;
EOF
}


function test_age() {
    local interval=$1
    local max_age=$2
    local snapshot_var=${interval}_snapshots
    local last_snapshot=${!snapshot_var}

    local mtime=$(ssh ${SSH_IDENTITY} -T $backup_host \
	"stat -c '%Y' $remote_path/${MODULE}/$interval.0")
    [ -z "$mtime" ] && return 1
    age=$(( $(date +%s) - $mtime ))
    test $age -gt $max_age
}


function rotate_all_snapshots() {
    rotate_snapshots hourly
    test_age daily $(( 24*60*60 )) && rotate_snapshots daily
    test_age weekly $(( 7*24*60*60 )) && rotate_snapshots weekly
    test_age monthly $(( 30*24*60*60 )) && rotate_snapshots monthly
}


function backup_module() {
    log module $MODULE

    [ ! -f ${CONFIG_DIR}/${MODULE}/config ] && die "Config file not found in ${CONFIG_DIR}/${MODULE}/config"

    # module-level configs override the defaults
    source ${CONFIG_DIR}/${MODULE}/config

    if [ -e ${CONFIG_DIR}/${MODULE}/lock ]; then
        notify "ERROR: Backup already running"
        errlog "ERROR: Backup already running"
        exit 1
    fi

    notify "Running backup for ${MODULE}"

    touch ${CONFIG_DIR}/${MODULE}/lock

    push_backup

    rotate_all_snapshots

    rm ${CONFIG_DIR}/${MODULE}/lock

    notify "Backup done for ${MODULE}"
}


#
# main script starts here
#

CONFIG_DIR=${HOME}/.backup
while getopts 'hc:' ARG; do
    case ${ARG} in
        'h')
            cat <<-"EOF"
			usage: backup [OPTIONS] [MODULE...]

			OPTIONS:
			    -c CONFIGDIR   Read configuration from CONFIGDIR instead of
			                   the default: $HOME/.backup
			    -h             Show this help.

			MODULE... names one or more modules to back up.  If no MODULE is named, all
			modules are backed up.
		EOF
                exit 0
                ;;
        'c')
            [ -d ${OPTARG} ] || die "${OPTARG} is not a directory"
            CONFIG_DIR=${OPTARG}
            ;;
        '?')
            die "unknown command-line argument"
            ;;
    esac
done

ARGS=(${0} "$@")

# top-level config provides defaults
if ! [ -d ${CONFIG_DIR} ]; then
    log config dir ${CONFIG_DIR} not found
    exit 1
fi
log using config dir ${CONFIG_DIR}

[ -r ${CONFIG_DIR}/config ] && source ${CONFIG_DIR}/config

if [ -n "${ssh_id}" ]; then
    SSH_IDENTITY="-i ${ssh_id} -o IdentitiesOnly=yes -o PreferredAuthentications=publickey"
else
    SSH_IDENTITY=""
fi

if [ $(($# + 1)) -le ${OPTIND} ]; then
    for D in ${CONFIG_DIR}/*; do
        if [ -d ${D} -a -f ${D}/config ]; then
            MODULES[${#MODULES[*]}]=$(basename $D)
        fi
    done
else
    for I in $(seq ${OPTIND} $#); do
        MODULES[${#MODULES[*]}]=${ARGS[${I}]}
    done
fi

RETVAL=0
for MODULE in ${MODULES[@]}; do
    # Run the backup in a subshell so variables set by sourcing this
    # module's config don't affect the next module.
    ( backup_module )
    if [ $? -ne 0 ]; then
        errlog "module $MODULE failed, continuing"
        RETVAL=1
    fi
done

exit ${RETVAL}
